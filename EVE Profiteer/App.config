<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <configSections>
    <section name="entityFramework" type="System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" requirePermission="false" />
    <sectionGroup name="userSettings" type="System.Configuration.UserSettingsGroup, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
      <section name="eZet.EveProfiteer.Properties.Settings" type="System.Configuration.ClientSettingsSection, System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" allowExeDefinition="MachineToLocalUser" requirePermission="false" />
    </sectionGroup>
    
  <!-- For more information on Entity Framework configuration, visit http://go.microsoft.com/fwlink/?LinkID=237468 --></configSections>
  <connectionStrings>
    <!--
        For SqlDatabaseTraceListener use the tool installed in the tools directory by Nuget 
        to install the default database on the local SQL instance, using Windows credentials:
        .\diagnostics_regsql.exe -E -AD
      -->
    <add name="diagnosticsdb" providerName="System.Data.SqlClient" connectionString="server=.;database=diagnosticsdb;Integrated Security=SSPI" />
    <add name="EveProfiteerDbString" connectionString="Data Source=EZLAP\SQLEXPRESS;Initial Catalog=EveProfiteerDb;Integrated Security=True" providerName="System.Data.SqlClient" />
    <add name="EveProfiteerDbEntities" connectionString="metadata=res://*/EveProfiteerDbModel.csdl|res://*/EveProfiteerDbModel.ssdl|res://*/EveProfiteerDbModel.msl;provider=System.Data.SqlClient;provider connection string=&quot;data source=EZLAP\SQLEXPRESS;initial catalog=EveProfiteerDb;integrated security=True;MultipleActiveResultSets=True;App=EntityFramework&quot;" providerName="System.Data.EntityClient" />
  </connectionStrings>
  <startup>
    <supportedRuntime version="v4.0" sku=".NETFramework,Version=v4.5" />
  </startup>
  <entityFramework>
    <defaultConnectionFactory type="System.Data.Entity.Infrastructure.SqlConnectionFactory, EntityFramework" />
    <providers>
      <provider invariantName="System.Data.SqlClient" type="System.Data.Entity.SqlServer.SqlProviderServices, EntityFramework.SqlServer" />
    </providers>
  </entityFramework>
  <appSettings>
    <!-- The folder to use for data, relative to the ApplicationData folder. -->
    <add key="eveLib.AppData" value="EveProfiteer" />
    <!-- The HTTP User Agent name that will be used for requests. CCP recommends using your application name. -->
    <add key="eveLib.UserAgent" value="EveProfiteer-development" />
    <add key="ClientSettingsProvider.ServiceUri" value="" />
  </appSettings>
  <userSettings>
    <eZet.EveProfiteer.Properties.Settings>
      <setting name="DateFormat" serializeAs="String">
        <value>dd/MM/yyyy</value>
      </setting>
      <setting name="BuyOrderColor" serializeAs="String">
        <value />
      </setting>
      <setting name="SellOrderColor" serializeAs="String">
        <value />
      </setting>
      <setting name="ActiveOrderColor" serializeAs="String">
        <value>224, 224, 224</value>
      </setting>
      <setting name="InactiveOrderColor" serializeAs="String">
        <value />
      </setting>
      <setting name="DonchianChannelColor" serializeAs="String">
        <value>ActiveCaption</value>
      </setting>
      <setting name="DonchianCenterColor" serializeAs="String">
        <value>Blue</value>
      </setting>
      <setting name="AveragePriceColor" serializeAs="String">
        <value>InfoText</value>
      </setting>
      <setting name="Moving20DayColor" serializeAs="String">
        <value>Green</value>
      </setting>
      <setting name="Moving5DayColor" serializeAs="String">
        <value>Red</value>
      </setting>
      <setting name="VolumeColor" serializeAs="String">
        <value>HotTrack</value>
      </setting>
      <setting name="DefaultRegionId" serializeAs="String">
        <value>10000002</value>
      </setting>
      <setting name="DefaultStationId" serializeAs="String">
        <value>60003760</value>
      </setting>
      <setting name="SellPriceOffset" serializeAs="String">
        <value>-2</value>
      </setting>
      <setting name="BuyPriceOffset" serializeAs="String">
        <value>-2</value>
      </setting>
      <setting name="MinProfitMargin" serializeAs="String">
        <value>6</value>
      </setting>
      <setting name="MaxProfitMargin" serializeAs="String">
        <value>10</value>
      </setting>
      <setting name="MaxBuyOrderTotal" serializeAs="String">
        <value>200000000</value>
      </setting>
      <setting name="MinSellOrderTotal" serializeAs="String">
        <value>20000000</value>
      </setting>
      <setting name="MaxSellOrderTotal" serializeAs="String">
        <value>500000000</value>
      </setting>
      <setting name="TaxRate" serializeAs="String">
        <value>0.75</value>
      </setting>
      <setting name="BrokerFeeRate" serializeAs="String">
        <value>0.73</value>
      </setting>
      <setting name="DateTimeFormat" serializeAs="String">
        <value>dd/MM/yy HH:mm:ss</value>
      </setting>
      <setting name="UpdatePriceLimits" serializeAs="String">
        <value>False</value>
      </setting>
      <setting name="UpdateQuantities" serializeAs="String">
        <value>False</value>
      </setting>
      <setting name="EditInventoryLimit" serializeAs="String">
        <value>False</value>
      </setting>
      <setting name="InventoryLimitValue" serializeAs="String">
        <value>0</value>
      </setting>
      <setting name="OrderManagerRememberSettings" serializeAs="String">
        <value>True</value>
      </setting>
    </eZet.EveProfiteer.Properties.Settings>
  </userSettings>
  <system.diagnostics>
    <sharedListeners>
      <add name="bufferedEmail" type="Essential.Diagnostics.BufferedEmailTraceListener, Essential.Diagnostics" initializeData="user1@example.org,user2@example.org">
        <!--
          Adds formatted trace messages to a buffer and sends an email when the process 
          exits, or on request.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=BufferedEmailTraceListener
        -->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Information" />
      </add>
      <add name="coloredconsole" type="Essential.Diagnostics.ColoredConsoleTraceListener, Essential.Diagnostics" template="{DateTime:HH':'mm':'ssZ} [{Thread}] {EventType} {Source} {Id}: {Message}{Data}" convertWriteToEvent="true">
        <!--
          Writes to the console output or error stream, using color to highlight 
          event types and allowing a customised output format.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=ColoredConsoleTraceListener
        -->
      </add>
      <add name="email" type="Essential.Diagnostics.EmailTraceListener, Essential.Diagnostics" initializeData="user1@example.org,user2@example.org">
        <!--
	        Sends each trace message received in an email, using the specified subject and 
          body templates. Note: Set a filter to avoid flooding.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=EmailTraceListener
        -->
        <filter type="System.Diagnostics.EventTypeFilter" initializeData="Warning" />
      </add>
      <add name="inmemory" type="Essential.Diagnostics.InMemoryTraceListener, Essential.Diagnostics" initializeData="100">
        <!--
          Records and immutable copy of trace events in memory, within a circular buffer
          of the specified size. 
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=InMemoryTraceListener
  	    -->
      </add>
      <add name="RollingFileListener" type="Essential.Diagnostics.RollingFileTraceListener, Essential.Diagnostics" initializeData="C:\Temp\Logs\{ApplicationName}-{DateTime:yyyy-MM-dd}.log" convertWriteToEvent="true">
        <!--
          Writes to a text file, rolling to a new file based on a filename template 
          (usually including the date).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingFileTraceListener
        -->
      </add>
      <add name="rollingxml" type="Essential.Diagnostics.RollingXmlTraceListener, Essential.Diagnostics" initializeData="C:\Temp\Logs\{ApplicationName}-{DateTime:yyyyMMdd}.svclog">
        <!--
          Writes writes E2ETraceEvent XML fragments to a text file, rolling to a new 
          file based on a filename template (usually including the date).
          The E2ETraceEvent XML fragment format can be read by the Service Trace Viewer tool.
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=RollingXmlTraceListener
        -->
      </add>
      <add name="sqldatabase" type="Essential.Diagnostics.SqlDatabaseTraceListener, Essential.Diagnostics" initializeData="diagnosticsdb" applicationName="Diagnostics.Sample">
        <!--
          Trace listener that writes to the database connection specified into a
          table created by the diagnostics_regsql.exe tool (in the package tools directory).
          See: http://essentialdiagnostics.codeplex.com/wikipage?title=SqlDatabaseTraceListener
        -->
      </add>
    </sharedListeners>
    <sources>
      <source name="EveProfiteer" switchName="Full">
        <listeners>
          <add name="RollingFileListener" />
        </listeners>
      </source>
      <source name="EveLib" switchValue="All">
        <listeners>
        </listeners>
      </source>
      <!--
        = Sample Source =
      <source name=""
              switchValue="All|None|Critical|Error|Warning|Information|Verbose|ActivityTracing"
              switchName="">
        <listeners>
          <clear />
          <add name="" />
          <add name="" />
        </listeners>
      </source>
      -->
    </sources>
    <switches>
      <!--
          Specify switchName (instead of switchValue) to use the same
          switch for multiple sources.
          Values can either be SourceLevels name values, decimal,
          or hexadecimal.
        -->
      <add name="Full" value="All" />
      <add name="SourceSwitch2" value="0,1,3,7,15,31,0xFF00,0xFFFF" />
    </switches>
    <!--
    -->
    <trace autoflush="true" indentsize="0">
      <listeners>
        <!--
          Legacy Trace.Write() statements (not using a TraceSource).
          Turn indent off to avoid confusion for multithreaded traces,
          and clear the default listener for performance.
        -->
        <clear />
      </listeners>
    </trace>
  </system.diagnostics>
  <system.net>
    <mailSettings>
      <smtp deliveryMethod="SpecifiedPickupDirectory" from="diagnostics@example.org">
        <!--
          Used by email trace listeners. For production, or if using a test SMTP server 
          such as smtp4dev, change to deliveryMethod="Network" and specify your mail host.
        -->
        <network host="localhost" defaultCredentials="true" />
        <specifiedPickupDirectory pickupDirectoryLocation="C:\Temp\MailPickup" />
      </smtp>
    </mailSettings>
  </system.net>
  <system.web>
    <membership defaultProvider="ClientAuthenticationMembershipProvider">
      <providers>
        <add name="ClientAuthenticationMembershipProvider" type="System.Web.ClientServices.Providers.ClientFormsAuthenticationMembershipProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" />
      </providers>
    </membership>
    <roleManager defaultProvider="ClientRoleProvider" enabled="true">
      <providers>
        <add name="ClientRoleProvider" type="System.Web.ClientServices.Providers.ClientRoleProvider, System.Web.Extensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35" serviceUri="" cacheTimeout="86400" />
      </providers>
    </roleManager>
  </system.web>
</configuration>