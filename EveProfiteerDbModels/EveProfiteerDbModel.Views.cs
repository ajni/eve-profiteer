//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(eZet.EveProfiteer.Models.EveProfiteerDbEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets0ac1ff9466e3ba7835297bc0fd46365f7a677b1448623c3fdaba6eaee0140a3a))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySets0ac1ff9466e3ba7835297bc0fd46365f7a677b1448623c3fdaba6eaee0140a3a : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "0ac1ff9466e3ba7835297bc0fd46365f7a677b1448623c3fdaba6eaee0140a3a"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "EveProfiteerDbModelStoreContainer.ApiKeyEntities")
            {
                return GetView0();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.ApiKeys")
            {
                return GetView1();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.JournalEntries")
            {
                return GetView2();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.invTypes")
            {
                return GetView3();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.Orders")
            {
                return GetView4();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.Transactions")
            {
                return GetView5();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.staStations")
            {
                return GetView6();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.Assets")
            {
                return GetView7();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.BatchMaterials")
            {
                return GetView8();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.invBlueprintTypes")
            {
                return GetView9();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.ProductionBatches")
            {
                return GetView10();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.FifoCost")
            {
                return GetView11();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.ApiKeyApiKeyEntities")
            {
                return GetView12();
            }

            if (extentName == "EveProfiteerDbEntities.ApiKeyEntities")
            {
                return GetView13();
            }

            if (extentName == "EveProfiteerDbEntities.ApiKeys")
            {
                return GetView14();
            }

            if (extentName == "EveProfiteerDbEntities.JournalEntries")
            {
                return GetView15();
            }

            if (extentName == "EveProfiteerDbEntities.InvTypes")
            {
                return GetView16();
            }

            if (extentName == "EveProfiteerDbEntities.Orders")
            {
                return GetView17();
            }

            if (extentName == "EveProfiteerDbEntities.Transactions")
            {
                return GetView18();
            }

            if (extentName == "EveProfiteerDbEntities.StaStations")
            {
                return GetView19();
            }

            if (extentName == "EveProfiteerDbEntities.Assets")
            {
                return GetView20();
            }

            if (extentName == "EveProfiteerDbEntities.BatchMaterials")
            {
                return GetView21();
            }

            if (extentName == "EveProfiteerDbEntities.InvBlueprintTypes")
            {
                return GetView22();
            }

            if (extentName == "EveProfiteerDbEntities.ProductionBatches")
            {
                return GetView23();
            }

            if (extentName == "EveProfiteerDbEntities.FifoCosts")
            {
                return GetView24();
            }

            if (extentName == "EveProfiteerDbEntities.ApiKeyApiKeyEntities")
            {
                return GetView25();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.invMarketGroups")
            {
                return GetView26();
            }

            if (extentName == "EveProfiteerDbEntities.InvMarketGroups")
            {
                return GetView27();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.mapRegions")
            {
                return GetView28();
            }

            if (extentName == "EveProfiteerDbEntities.MapRegions")
            {
                return GetView29();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.invGroups")
            {
                return GetView30();
            }

            if (extentName == "EveProfiteerDbEntities.InvGroups")
            {
                return GetView31();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.invTypeMaterials")
            {
                return GetView32();
            }

            if (extentName == "EveProfiteerDbEntities.InvTypeMaterials")
            {
                return GetView33();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.RefTypes")
            {
                return GetView34();
            }

            if (extentName == "EveProfiteerDbEntities.RefTypes")
            {
                return GetView35();
            }

            if (extentName == "EveProfiteerDbModelStoreContainer.MarketOrders")
            {
                return GetView36();
            }

            if (extentName == "EveProfiteerDbEntities.MarketOrders")
            {
                return GetView37();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.ApiKeyEntities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApiKeyEntities
        [EveProfiteerDbModel.Store.ApiKeyEntities](T1.ApiKeyEntities_Id, T1.ApiKeyEntities_Name, T1.ApiKeyEntities_Type, T1.ApiKeyEntities_ImagePath, T1.ApiKeyEntities_IsActive)
    FROM (
        SELECT 
            T.Id AS ApiKeyEntities_Id, 
            T.Name AS ApiKeyEntities_Name, 
            T.Type AS ApiKeyEntities_Type, 
            T.ImagePath AS ApiKeyEntities_ImagePath, 
            T.IsActive AS ApiKeyEntities_IsActive, 
            True AS _from0
        FROM EveProfiteerDbEntities.ApiKeyEntities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.ApiKeys.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApiKeys
        [EveProfiteerDbModel.Store.ApiKeys](T1.ApiKeys_Id, T1.ApiKeys_ApiKeyId, T1.ApiKeys_VCode, T1.ApiKeys_KeyType)
    FROM (
        SELECT 
            T.Id AS ApiKeys_Id, 
            T.ApiKeyId AS ApiKeys_ApiKeyId, 
            T.VCode AS ApiKeys_VCode, 
            T.KeyType AS ApiKeys_KeyType, 
            True AS _from0
        FROM EveProfiteerDbEntities.ApiKeys AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.JournalEntries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing JournalEntries
        [EveProfiteerDbModel.Store.JournalEntries](T1.JournalEntries_Id, T1.JournalEntries_Date, T1.JournalEntries_RefId, T1.JournalEntries_refTypeId, T1.JournalEntries_OwnerName, T1.JournalEntries_OwnerId, T1.JournalEntries_ParticipantName, T1.JournalEntries_ParticipantId, T1.JournalEntries_ArgumentName, T1.JournalEntries_ArgumentId, T1.JournalEntries_Amount, T1.JournalEntries_BalanceAfter, T1.JournalEntries_Reason, T1.JournalEntries_TaxReceiverId, T1.JournalEntries_TaxAmount, T1.[JournalEntries.ApiKeyEntity_Id], T1.JournalEntries_OwnerTypeId, T1.JournalEntries_ParticipantTypeId)
    FROM (
        SELECT 
            T.Id AS JournalEntries_Id, 
            T.Date AS JournalEntries_Date, 
            T.RefId AS JournalEntries_RefId, 
            T.RefTypeId AS JournalEntries_refTypeId, 
            T.OwnerName AS JournalEntries_OwnerName, 
            T.OwnerId AS JournalEntries_OwnerId, 
            T.ParticipantName AS JournalEntries_ParticipantName, 
            T.ParticipantId AS JournalEntries_ParticipantId, 
            T.ArgumentName AS JournalEntries_ArgumentName, 
            T.ArgumentId AS JournalEntries_ArgumentId, 
            T.Amount AS JournalEntries_Amount, 
            T.BalanceAfter AS JournalEntries_BalanceAfter, 
            T.Reason AS JournalEntries_Reason, 
            T.TaxReceiverId AS JournalEntries_TaxReceiverId, 
            T.TaxAmount AS JournalEntries_TaxAmount, 
            T.ApiKeyEntity_Id AS [JournalEntries.ApiKeyEntity_Id], 
            T.OwnerTypeId AS JournalEntries_OwnerTypeId, 
            T.ParticipantTypeId AS JournalEntries_ParticipantTypeId, 
            True AS _from0
        FROM EveProfiteerDbEntities.JournalEntries AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.invTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing invTypes
        [EveProfiteerDbModel.Store.invTypes](T1.invTypes_typeID, T1.invTypes_groupID, T1.invTypes_typeName, T1.invTypes_description, T1.invTypes_mass, T1.invTypes_volume, T1.invTypes_capacity, T1.invTypes_portionSize, T1.invTypes_raceID, T1.invTypes_basePrice, T1.invTypes_published, T1.invTypes_marketGroupID, T1.invTypes_chanceOfDuplicating)
    FROM (
        SELECT 
            T.TypeId AS invTypes_typeID, 
            T.GroupId AS invTypes_groupID, 
            T.TypeName AS invTypes_typeName, 
            T.Description AS invTypes_description, 
            T.Mass AS invTypes_mass, 
            T.Volume AS invTypes_volume, 
            T.Capacity AS invTypes_capacity, 
            T.PortionSize AS invTypes_portionSize, 
            T.RaceId AS invTypes_raceID, 
            T.BasePrice AS invTypes_basePrice, 
            T.Published AS invTypes_published, 
            T.MarketGroupId AS invTypes_marketGroupID, 
            T.ChanceOfDuplicating AS invTypes_chanceOfDuplicating, 
            True AS _from0
        FROM EveProfiteerDbEntities.InvTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.Orders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Orders
        [EveProfiteerDbModel.Store.Orders](T1.Orders_Id, T1.Orders_TypeId, T1.Orders_BuyQuantity, T1.Orders_MaxBuyPrice, T1.Orders_MinSellQuantity, T1.Orders_MinSellPrice, T1.Orders_MaxSellQuantity, T1.Orders_UpdateTime, T1.Orders_AvgVolume, T1.Orders_CurrentBuyPrice, T1.Orders_CurrentSellPrice, T1.Orders_AvgPrice, T1.[Orders.ApiKeyEntity_Id], T1.Orders_IsSellOrder, T1.Orders_IsBuyOrder, T1.Orders_Notes, T1.Orders_StationId)
    FROM (
        SELECT 
            T.Id AS Orders_Id, 
            T.TypeId AS Orders_TypeId, 
            T.BuyQuantity AS Orders_BuyQuantity, 
            T.MaxBuyPrice AS Orders_MaxBuyPrice, 
            T.MinSellQuantity AS Orders_MinSellQuantity, 
            T.MinSellPrice AS Orders_MinSellPrice, 
            T.MaxSellQuantity AS Orders_MaxSellQuantity, 
            T.UpdateTime AS Orders_UpdateTime, 
            T.AvgVolume AS Orders_AvgVolume, 
            T.CurrentBuyPrice AS Orders_CurrentBuyPrice, 
            T.CurrentSellPrice AS Orders_CurrentSellPrice, 
            T.AvgPrice AS Orders_AvgPrice, 
            T.ApiKeyEntity_Id AS [Orders.ApiKeyEntity_Id], 
            T.IsSellOrder AS Orders_IsSellOrder, 
            T.IsBuyOrder AS Orders_IsBuyOrder, 
            T.Notes AS Orders_Notes, 
            T.StationId AS Orders_StationId, 
            True AS _from0
        FROM EveProfiteerDbEntities.Orders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.Transactions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Transactions
        [EveProfiteerDbModel.Store.Transactions](T1.Transactions_Id, T1.Transactions_TransactionDate, T1.Transactions_TransactionId, T1.Transactions_Quantity, T1.Transactions_TypeId, T1.Transactions_Price, T1.Transactions_ClientId, T1.Transactions_ClientName, T1.Transactions_StationId, T1.Transactions_StationName, T1.Transactions_TransactionType, T1.Transactions_TransactionFor, T1.[Transactions.ApiKeyEntity_Id], T1.Transactions_JournalTransactionId, T1.Transactions_ClientTypeId, T1.Transactions_PerpetualAverageCost, T1.Transactions_PostTransactionStock, T1.Transactions_UnaccountedQuantity, T1.Transactions_TaxLiability, T1.Transactions_BrokerFee, T1.Transactions_CogsBrokerFees, T1.Transactions_CogsMaterialCost)
    FROM (
        SELECT 
            T.Id AS Transactions_Id, 
            T.TransactionDate AS Transactions_TransactionDate, 
            T.TransactionId AS Transactions_TransactionId, 
            T.Quantity AS Transactions_Quantity, 
            T.TypeId AS Transactions_TypeId, 
            T.Price AS Transactions_Price, 
            T.ClientId AS Transactions_ClientId, 
            T.ClientName AS Transactions_ClientName, 
            T.StationId AS Transactions_StationId, 
            T.StationName AS Transactions_StationName, 
            CAST(T.TransactionType AS [Edm.Int32]) AS Transactions_TransactionType, 
            T.TransactionFor AS Transactions_TransactionFor, 
            T.ApiKeyEntity_Id AS [Transactions.ApiKeyEntity_Id], 
            T.JournalTransactionId AS Transactions_JournalTransactionId, 
            T.ClientTypeId AS Transactions_ClientTypeId, 
            T.PerpetualAverageCost AS Transactions_PerpetualAverageCost, 
            T.PostTransactionStock AS Transactions_PostTransactionStock, 
            T.UnaccountedQuantity AS Transactions_UnaccountedQuantity, 
            T.TaxLiability AS Transactions_TaxLiability, 
            T.BrokerFee AS Transactions_BrokerFee, 
            T.CogsBrokerFees AS Transactions_CogsBrokerFees, 
            T.CogsMaterialCost AS Transactions_CogsMaterialCost, 
            True AS _from0
        FROM EveProfiteerDbEntities.Transactions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.staStations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing staStations
        [EveProfiteerDbModel.Store.staStations](T1.staStations_stationID, T1.staStations_security, T1.staStations_dockingCostPerVolume, T1.staStations_maxShipVolumeDockable, T1.staStations_officeRentalCost, T1.staStations_operationID, T1.staStations_stationTypeID, T1.staStations_corporationID, T1.staStations_solarSystemID, T1.staStations_constellationID, T1.staStations_regionID, T1.staStations_stationName, T1.staStations_x, T1.staStations_y, T1.staStations_z, T1.staStations_reprocessingEfficiency, T1.staStations_reprocessingStationsTake, T1.staStations_reprocessingHangarFlag)
    FROM (
        SELECT 
            T.StationId AS staStations_stationID, 
            T.Security AS staStations_security, 
            T.DockingCostPerVolume AS staStations_dockingCostPerVolume, 
            T.MaxShipVolumeDockable AS staStations_maxShipVolumeDockable, 
            T.OfficeRentalCost AS staStations_officeRentalCost, 
            T.OperationId AS staStations_operationID, 
            T.StationTypeId AS staStations_stationTypeID, 
            T.CorporationId AS staStations_corporationID, 
            T.SolarSystemId AS staStations_solarSystemID, 
            T.ConstellationId AS staStations_constellationID, 
            T.RegionId AS staStations_regionID, 
            T.StationName AS staStations_stationName, 
            T.X AS staStations_x, 
            T.Y AS staStations_y, 
            T.Z AS staStations_z, 
            T.ReprocessingEfficiency AS staStations_reprocessingEfficiency, 
            T.ReprocessingStationsTake AS staStations_reprocessingStationsTake, 
            T.ReprocessingHangarFlag AS staStations_reprocessingHangarFlag, 
            True AS _from0
        FROM EveProfiteerDbEntities.StaStations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.Assets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Assets
        [EveProfiteerDbModel.Store.Assets](T1.Assets_Id, T1.[Assets.InvTypes_TypeId], T1.Assets_Quantity, T1.Assets_ActualQuantity, T1.Assets_MaterialCost, T1.[Assets.ApiKeyEntity_Id], T1.Assets_UnaccountedQuantity, T1.Assets_LatestAverageCost, T1.Assets_BrokerFees)
    FROM (
        SELECT 
            T.Id AS Assets_Id, 
            T.InvTypes_TypeId AS [Assets.InvTypes_TypeId], 
            T.Quantity AS Assets_Quantity, 
            T.ActualQuantity AS Assets_ActualQuantity, 
            T.MaterialCost AS Assets_MaterialCost, 
            T.ApiKeyEntity_Id AS [Assets.ApiKeyEntity_Id], 
            T.UnaccountedQuantity AS Assets_UnaccountedQuantity, 
            T.LatestAverageCost AS Assets_LatestAverageCost, 
            T.BrokerFees AS Assets_BrokerFees, 
            True AS _from0
        FROM EveProfiteerDbEntities.Assets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.BatchMaterials.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BatchMaterials
        [EveProfiteerDbModel.Store.BatchMaterials](T1.BatchMaterials_Id, T1.BatchMaterials_TypeId, T1.BatchMaterials_BatchId, T1.BatchMaterials_Quantity, T1.BatchMaterials_TotalCost)
    FROM (
        SELECT 
            T.Id AS BatchMaterials_Id, 
            T.TypeId AS BatchMaterials_TypeId, 
            T.BatchId AS BatchMaterials_BatchId, 
            T.Quantity AS BatchMaterials_Quantity, 
            T.TotalCost AS BatchMaterials_TotalCost, 
            True AS _from0
        FROM EveProfiteerDbEntities.BatchMaterials AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.invBlueprintTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing invBlueprintTypes
        [EveProfiteerDbModel.Store.invBlueprintTypes](T1.invBlueprintTypes_blueprintTypeID, T1.invBlueprintTypes_parentBlueprintTypeID, T1.invBlueprintTypes_productTypeID, T1.invBlueprintTypes_productionTime, T1.invBlueprintTypes_techLevel, T1.invBlueprintTypes_researchProductivityTime, T1.invBlueprintTypes_researchMaterialTime, T1.invBlueprintTypes_researchCopyTime, T1.invBlueprintTypes_researchTechTime, T1.invBlueprintTypes_productivityModifier, T1.invBlueprintTypes_materialModifier, T1.invBlueprintTypes_wasteFactor, T1.invBlueprintTypes_maxProductionLimit)
    FROM (
        SELECT 
            T.BlueprintTypeId AS invBlueprintTypes_blueprintTypeID, 
            T.ParentBlueprintTypeID AS invBlueprintTypes_parentBlueprintTypeID, 
            T.ProductTypeID AS invBlueprintTypes_productTypeID, 
            T.ProductionTime AS invBlueprintTypes_productionTime, 
            T.TechLevel AS invBlueprintTypes_techLevel, 
            T.ResearchProductivityTime AS invBlueprintTypes_researchProductivityTime, 
            T.ResearchMaterialTime AS invBlueprintTypes_researchMaterialTime, 
            T.ResearchCopyTime AS invBlueprintTypes_researchCopyTime, 
            T.ResearchTechTime AS invBlueprintTypes_researchTechTime, 
            T.ProductivityModifier AS invBlueprintTypes_productivityModifier, 
            T.MaterialModifier AS invBlueprintTypes_materialModifier, 
            T.WasteFactor AS invBlueprintTypes_wasteFactor, 
            T.MaxProductionLimit AS invBlueprintTypes_maxProductionLimit, 
            True AS _from0
        FROM EveProfiteerDbEntities.InvBlueprintTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.ProductionBatches.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductionBatches
        [EveProfiteerDbModel.Store.ProductionBatches](T1.ProductionBatches_Id, T1.ProductionBatches_ProductTypeId, T1.ProductionBatches_BlueprintTypeId, T1.ProductionBatches_ProductionQuantity, T1.ProductionBatches_QuantityLeft, T1.ProductionBatches_Date, T1.ProductionBatches_OtherCost, T1.ProductionBatches_TotalSales, T1.ProductionBatches_BlueprintME, T1.ProductionBatches_CharacterME, T1.ProductionBatches_ApiKeyEntityId)
    FROM (
        SELECT 
            T.Id AS ProductionBatches_Id, 
            T.ProductTypeId AS ProductionBatches_ProductTypeId, 
            T.BlueprintTypeId AS ProductionBatches_BlueprintTypeId, 
            T.ProductionQuantity AS ProductionBatches_ProductionQuantity, 
            T.QuantityLeft AS ProductionBatches_QuantityLeft, 
            T.Date AS ProductionBatches_Date, 
            T.OtherCost AS ProductionBatches_OtherCost, 
            T.TotalSales AS ProductionBatches_TotalSales, 
            T.BlueprintME AS ProductionBatches_BlueprintME, 
            T.CharacterME AS ProductionBatches_CharacterME, 
            T.ApiKeyEntityId AS ProductionBatches_ApiKeyEntityId, 
            True AS _from0
        FROM EveProfiteerDbEntities.ProductionBatches AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.FifoCost.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FifoCost
        [EveProfiteerDbModel.Store.FifoCost](T1.FifoCost_Id, T1.FifoCost_BuyTransactionId, T1.FifoCost_SellTransactionId, T1.FifoCost_Quantity)
    FROM (
        SELECT 
            T.Id AS FifoCost_Id, 
            T.BuyTransactionId AS FifoCost_BuyTransactionId, 
            T.SellTransactionId AS FifoCost_SellTransactionId, 
            T.Quantity AS FifoCost_Quantity, 
            True AS _from0
        FROM EveProfiteerDbEntities.FifoCosts AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.ApiKeyApiKeyEntities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApiKeyApiKeyEntities
        [EveProfiteerDbModel.Store.ApiKeyApiKeyEntities](T1.[ApiKeyApiKeyEntities.ApiKey_Id], T1.[ApiKeyApiKeyEntities.ApiKeyEntity_Id])
    FROM (
        SELECT 
            Key(T.ApiKey).Id AS [ApiKeyApiKeyEntities.ApiKey_Id], 
            Key(T.ApiKeyEntity).Id AS [ApiKeyApiKeyEntities.ApiKeyEntity_Id], 
            True AS _from0
        FROM EveProfiteerDbEntities.ApiKeyApiKeyEntities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.ApiKeyEntities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApiKeyEntities
        [EveProfiteerDbModel.ApiKeyEntity](T1.ApiKeyEntity_Id, T1.ApiKeyEntity_Name, T1.ApiKeyEntity_Type, T1.ApiKeyEntity_ImagePath, T1.ApiKeyEntity_IsActive)
    FROM (
        SELECT 
            T.Id AS ApiKeyEntity_Id, 
            T.Name AS ApiKeyEntity_Name, 
            T.Type AS ApiKeyEntity_Type, 
            T.ImagePath AS ApiKeyEntity_ImagePath, 
            T.IsActive AS ApiKeyEntity_IsActive, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.ApiKeyEntities AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.ApiKeys.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApiKeys
        [EveProfiteerDbModel.ApiKey](T1.ApiKey_Id, T1.ApiKey_ApiKeyId, T1.ApiKey_VCode, T1.ApiKey_KeyType)
    FROM (
        SELECT 
            T.Id AS ApiKey_Id, 
            T.ApiKeyId AS ApiKey_ApiKeyId, 
            T.VCode AS ApiKey_VCode, 
            T.KeyType AS ApiKey_KeyType, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.ApiKeys AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.JournalEntries.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing JournalEntries
        [EveProfiteerDbModel.JournalEntry](T1.JournalEntry_Id, T1.JournalEntry_Date, T1.JournalEntry_RefId, T1.JournalEntry_RefTypeId, T1.JournalEntry_OwnerName, T1.JournalEntry_OwnerId, T1.JournalEntry_ParticipantName, T1.JournalEntry_ParticipantId, T1.JournalEntry_ArgumentName, T1.JournalEntry_ArgumentId, T1.JournalEntry_Amount, T1.JournalEntry_BalanceAfter, T1.JournalEntry_Reason, T1.JournalEntry_TaxReceiverId, T1.JournalEntry_TaxAmount, T1.[JournalEntry.ApiKeyEntity_Id], T1.JournalEntry_OwnerTypeId, T1.JournalEntry_ParticipantTypeId)
    FROM (
        SELECT 
            T.Id AS JournalEntry_Id, 
            T.Date AS JournalEntry_Date, 
            T.RefId AS JournalEntry_RefId, 
            T.refTypeId AS JournalEntry_RefTypeId, 
            T.OwnerName AS JournalEntry_OwnerName, 
            T.OwnerId AS JournalEntry_OwnerId, 
            T.ParticipantName AS JournalEntry_ParticipantName, 
            T.ParticipantId AS JournalEntry_ParticipantId, 
            T.ArgumentName AS JournalEntry_ArgumentName, 
            T.ArgumentId AS JournalEntry_ArgumentId, 
            T.Amount AS JournalEntry_Amount, 
            T.BalanceAfter AS JournalEntry_BalanceAfter, 
            T.Reason AS JournalEntry_Reason, 
            T.TaxReceiverId AS JournalEntry_TaxReceiverId, 
            T.TaxAmount AS JournalEntry_TaxAmount, 
            T.ApiKeyEntity_Id AS [JournalEntry.ApiKeyEntity_Id], 
            T.OwnerTypeId AS JournalEntry_OwnerTypeId, 
            T.ParticipantTypeId AS JournalEntry_ParticipantTypeId, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.JournalEntries AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.InvTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InvTypes
        [EveProfiteerDbModel.InvType](T1.InvType_TypeId, T1.InvType_GroupId, T1.InvType_TypeName, T1.InvType_Description, T1.InvType_Mass, T1.InvType_Volume, T1.InvType_Capacity, T1.InvType_PortionSize, T1.InvType_RaceId, T1.InvType_BasePrice, T1.InvType_Published, T1.InvType_MarketGroupId, T1.InvType_ChanceOfDuplicating)
    FROM (
        SELECT 
            T.typeID AS InvType_TypeId, 
            T.groupID AS InvType_GroupId, 
            T.typeName AS InvType_TypeName, 
            T.description AS InvType_Description, 
            T.mass AS InvType_Mass, 
            T.volume AS InvType_Volume, 
            T.capacity AS InvType_Capacity, 
            T.portionSize AS InvType_PortionSize, 
            T.raceID AS InvType_RaceId, 
            T.basePrice AS InvType_BasePrice, 
            T.published AS InvType_Published, 
            T.marketGroupID AS InvType_MarketGroupId, 
            T.chanceOfDuplicating AS InvType_ChanceOfDuplicating, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.invTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.Orders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Orders
        [EveProfiteerDbModel.Order](T1.Order_Id, T1.Order_TypeId, T1.Order_BuyQuantity, T1.Order_MaxBuyPrice, T1.Order_MinSellQuantity, T1.Order_MinSellPrice, T1.Order_MaxSellQuantity, T1.Order_UpdateTime, T1.Order_AvgVolume, T1.Order_CurrentBuyPrice, T1.Order_CurrentSellPrice, T1.Order_AvgPrice, T1.[Order.ApiKeyEntity_Id], T1.Order_IsSellOrder, T1.Order_IsBuyOrder, T1.Order_Notes, T1.Order_StationId)
    FROM (
        SELECT 
            T.Id AS Order_Id, 
            T.TypeId AS Order_TypeId, 
            T.BuyQuantity AS Order_BuyQuantity, 
            T.MaxBuyPrice AS Order_MaxBuyPrice, 
            T.MinSellQuantity AS Order_MinSellQuantity, 
            T.MinSellPrice AS Order_MinSellPrice, 
            T.MaxSellQuantity AS Order_MaxSellQuantity, 
            T.UpdateTime AS Order_UpdateTime, 
            T.AvgVolume AS Order_AvgVolume, 
            T.CurrentBuyPrice AS Order_CurrentBuyPrice, 
            T.CurrentSellPrice AS Order_CurrentSellPrice, 
            T.AvgPrice AS Order_AvgPrice, 
            T.ApiKeyEntity_Id AS [Order.ApiKeyEntity_Id], 
            T.IsSellOrder AS Order_IsSellOrder, 
            T.IsBuyOrder AS Order_IsBuyOrder, 
            T.Notes AS Order_Notes, 
            T.StationId AS Order_StationId, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.Orders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.Transactions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Transactions
        [EveProfiteerDbModel.Transaction](T1.Transaction_Id, T1.Transaction_TransactionDate, T1.Transaction_TransactionId, T1.Transaction_Quantity, T1.Transaction_TypeId, T1.Transaction_Price, T1.Transaction_ClientId, T1.Transaction_ClientName, T1.Transaction_StationId, T1.Transaction_StationName, T1.Transaction_TransactionType, T1.Transaction_TransactionFor, T1.[Transaction.ApiKeyEntity_Id], T1.Transaction_JournalTransactionId, T1.Transaction_ClientTypeId, T1.Transaction_TaxLiability, T1.Transaction_BrokerFee, T1.Transaction_PostTransactionStock, T1.Transaction_UnaccountedQuantity, T1.Transaction_PerpetualAverageCost, T1.Transaction_CogsBrokerFees, T1.Transaction_CogsMaterialCost)
    FROM (
        SELECT 
            T.Id AS Transaction_Id, 
            T.TransactionDate AS Transaction_TransactionDate, 
            T.TransactionId AS Transaction_TransactionId, 
            T.Quantity AS Transaction_Quantity, 
            T.TypeId AS Transaction_TypeId, 
            T.Price AS Transaction_Price, 
            T.ClientId AS Transaction_ClientId, 
            T.ClientName AS Transaction_ClientName, 
            T.StationId AS Transaction_StationId, 
            T.StationName AS Transaction_StationName, 
            CAST(T.TransactionType AS [EveProfiteerDbModel.TransactionType]) AS Transaction_TransactionType, 
            T.TransactionFor AS Transaction_TransactionFor, 
            T.ApiKeyEntity_Id AS [Transaction.ApiKeyEntity_Id], 
            T.JournalTransactionId AS Transaction_JournalTransactionId, 
            T.ClientTypeId AS Transaction_ClientTypeId, 
            T.TaxLiability AS Transaction_TaxLiability, 
            T.BrokerFee AS Transaction_BrokerFee, 
            T.PostTransactionStock AS Transaction_PostTransactionStock, 
            T.UnaccountedQuantity AS Transaction_UnaccountedQuantity, 
            T.PerpetualAverageCost AS Transaction_PerpetualAverageCost, 
            T.CogsBrokerFees AS Transaction_CogsBrokerFees, 
            T.CogsMaterialCost AS Transaction_CogsMaterialCost, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.Transactions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.StaStations.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StaStations
        [EveProfiteerDbModel.StaStation](T1.StaStation_StationId, T1.StaStation_Security, T1.StaStation_DockingCostPerVolume, T1.StaStation_MaxShipVolumeDockable, T1.StaStation_OfficeRentalCost, T1.StaStation_OperationId, T1.StaStation_StationTypeId, T1.StaStation_CorporationId, T1.StaStation_SolarSystemId, T1.StaStation_ConstellationId, T1.StaStation_RegionId, T1.StaStation_StationName, T1.StaStation_X, T1.StaStation_Y, T1.StaStation_Z, T1.StaStation_ReprocessingEfficiency, T1.StaStation_ReprocessingStationsTake, T1.StaStation_ReprocessingHangarFlag)
    FROM (
        SELECT 
            T.stationID AS StaStation_StationId, 
            T.security AS StaStation_Security, 
            T.dockingCostPerVolume AS StaStation_DockingCostPerVolume, 
            T.maxShipVolumeDockable AS StaStation_MaxShipVolumeDockable, 
            T.officeRentalCost AS StaStation_OfficeRentalCost, 
            T.operationID AS StaStation_OperationId, 
            T.stationTypeID AS StaStation_StationTypeId, 
            T.corporationID AS StaStation_CorporationId, 
            T.solarSystemID AS StaStation_SolarSystemId, 
            T.constellationID AS StaStation_ConstellationId, 
            T.regionID AS StaStation_RegionId, 
            T.stationName AS StaStation_StationName, 
            T.x AS StaStation_X, 
            T.y AS StaStation_Y, 
            T.z AS StaStation_Z, 
            T.reprocessingEfficiency AS StaStation_ReprocessingEfficiency, 
            T.reprocessingStationsTake AS StaStation_ReprocessingStationsTake, 
            T.reprocessingHangarFlag AS StaStation_ReprocessingHangarFlag, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.staStations AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.Assets.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Assets
        [EveProfiteerDbModel.Asset](T1.Asset_Id, T1.[Asset.InvTypes_TypeId], T1.Asset_Quantity, T1.[Asset.ApiKeyEntity_Id], T1.Asset_UnaccountedQuantity, T1.Asset_LatestAverageCost, T1.Asset_ActualQuantity, T1.Asset_BrokerFees, T1.Asset_MaterialCost)
    FROM (
        SELECT 
            T.Id AS Asset_Id, 
            T.InvTypes_TypeId AS [Asset.InvTypes_TypeId], 
            T.Quantity AS Asset_Quantity, 
            T.ApiKeyEntity_Id AS [Asset.ApiKeyEntity_Id], 
            T.UnaccountedQuantity AS Asset_UnaccountedQuantity, 
            T.LatestAverageCost AS Asset_LatestAverageCost, 
            T.ActualQuantity AS Asset_ActualQuantity, 
            T.BrokerFees AS Asset_BrokerFees, 
            T.MaterialCost AS Asset_MaterialCost, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.Assets AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.BatchMaterials.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BatchMaterials
        [EveProfiteerDbModel.BatchMaterial](T1.BatchMaterial_Id, T1.BatchMaterial_TypeId, T1.BatchMaterial_BatchId, T1.BatchMaterial_Quantity, T1.BatchMaterial_TotalCost)
    FROM (
        SELECT 
            T.Id AS BatchMaterial_Id, 
            T.TypeId AS BatchMaterial_TypeId, 
            T.BatchId AS BatchMaterial_BatchId, 
            T.Quantity AS BatchMaterial_Quantity, 
            T.TotalCost AS BatchMaterial_TotalCost, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.BatchMaterials AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.InvBlueprintTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InvBlueprintTypes
        [EveProfiteerDbModel.InvBlueprintType](T1.InvBlueprintType_BlueprintTypeId, T1.InvBlueprintType_ParentBlueprintTypeID, T1.InvBlueprintType_ProductTypeID, T1.InvBlueprintType_ProductionTime, T1.InvBlueprintType_TechLevel, T1.InvBlueprintType_ResearchProductivityTime, T1.InvBlueprintType_ResearchMaterialTime, T1.InvBlueprintType_ResearchCopyTime, T1.InvBlueprintType_ResearchTechTime, T1.InvBlueprintType_ProductivityModifier, T1.InvBlueprintType_MaterialModifier, T1.InvBlueprintType_WasteFactor, T1.InvBlueprintType_MaxProductionLimit)
    FROM (
        SELECT 
            T.blueprintTypeID AS InvBlueprintType_BlueprintTypeId, 
            T.parentBlueprintTypeID AS InvBlueprintType_ParentBlueprintTypeID, 
            T.productTypeID AS InvBlueprintType_ProductTypeID, 
            T.productionTime AS InvBlueprintType_ProductionTime, 
            T.techLevel AS InvBlueprintType_TechLevel, 
            T.researchProductivityTime AS InvBlueprintType_ResearchProductivityTime, 
            T.researchMaterialTime AS InvBlueprintType_ResearchMaterialTime, 
            T.researchCopyTime AS InvBlueprintType_ResearchCopyTime, 
            T.researchTechTime AS InvBlueprintType_ResearchTechTime, 
            T.productivityModifier AS InvBlueprintType_ProductivityModifier, 
            T.materialModifier AS InvBlueprintType_MaterialModifier, 
            T.wasteFactor AS InvBlueprintType_WasteFactor, 
            T.maxProductionLimit AS InvBlueprintType_MaxProductionLimit, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.invBlueprintTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.ProductionBatches.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ProductionBatches
        [EveProfiteerDbModel.ProductionBatch](T1.ProductionBatch_Id, T1.ProductionBatch_ProductTypeId, T1.ProductionBatch_BlueprintTypeId, T1.ProductionBatch_ProductionQuantity, T1.ProductionBatch_QuantityLeft, T1.ProductionBatch_Date, T1.ProductionBatch_OtherCost, T1.ProductionBatch_TotalSales, T1.ProductionBatch_BlueprintME, T1.ProductionBatch_CharacterME, T1.ProductionBatch_ApiKeyEntityId)
    FROM (
        SELECT 
            T.Id AS ProductionBatch_Id, 
            T.ProductTypeId AS ProductionBatch_ProductTypeId, 
            T.BlueprintTypeId AS ProductionBatch_BlueprintTypeId, 
            T.ProductionQuantity AS ProductionBatch_ProductionQuantity, 
            T.QuantityLeft AS ProductionBatch_QuantityLeft, 
            T.Date AS ProductionBatch_Date, 
            T.OtherCost AS ProductionBatch_OtherCost, 
            T.TotalSales AS ProductionBatch_TotalSales, 
            T.BlueprintME AS ProductionBatch_BlueprintME, 
            T.CharacterME AS ProductionBatch_CharacterME, 
            T.ApiKeyEntityId AS ProductionBatch_ApiKeyEntityId, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.ProductionBatches AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.FifoCosts.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing FifoCosts
        [EveProfiteerDbModel.FifoCost](T1.FifoCost_Id, T1.FifoCost_BuyTransactionId, T1.FifoCost_SellTransactionId, T1.FifoCost_Quantity)
    FROM (
        SELECT 
            T.Id AS FifoCost_Id, 
            T.BuyTransactionId AS FifoCost_BuyTransactionId, 
            T.SellTransactionId AS FifoCost_SellTransactionId, 
            T.Quantity AS FifoCost_Quantity, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.FifoCost AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.ApiKeyApiKeyEntities.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing ApiKeyApiKeyEntities
        [EveProfiteerDbModel.ApiKeyApiKeyEntities](T3.ApiKeyApiKeyEntities_ApiKeyEntity, T3.ApiKeyApiKeyEntities_ApiKey)
    FROM (
        SELECT -- Constructing ApiKeyEntity
            CreateRef(EveProfiteerDbEntities.ApiKeyEntities, row(T2.ApiKeyApiKeyEntities_ApiKeyEntity_Id), [EveProfiteerDbModel.ApiKeyEntity]) AS ApiKeyApiKeyEntities_ApiKeyEntity, 
            T2.ApiKeyApiKeyEntities_ApiKey
        FROM (
            SELECT -- Constructing ApiKey
                T1.ApiKeyApiKeyEntities_ApiKeyEntity_Id, 
                CreateRef(EveProfiteerDbEntities.ApiKeys, row(T1.ApiKeyApiKeyEntities_ApiKey_Id), [EveProfiteerDbModel.ApiKey]) AS ApiKeyApiKeyEntities_ApiKey
            FROM (
                SELECT 
                    T.ApiKeyEntity_Id AS ApiKeyApiKeyEntities_ApiKeyEntity_Id, 
                    T.ApiKey_Id AS ApiKeyApiKeyEntities_ApiKey_Id, 
                    True AS _from0
                FROM EveProfiteerDbModelStoreContainer.ApiKeyApiKeyEntities AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.invMarketGroups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing invMarketGroups
        [EveProfiteerDbModel.Store.invMarketGroups](T1.invMarketGroups_marketGroupID, T1.invMarketGroups_parentGroupID, T1.invMarketGroups_marketGroupName, T1.invMarketGroups_description, T1.invMarketGroups_iconID, T1.invMarketGroups_hasTypes)
    FROM (
        SELECT 
            T.MarketGroupId AS invMarketGroups_marketGroupID, 
            T.ParentGroupId AS invMarketGroups_parentGroupID, 
            T.MarketGroupName AS invMarketGroups_marketGroupName, 
            T.Description AS invMarketGroups_description, 
            T.IconId AS invMarketGroups_iconID, 
            T.HasTypes AS invMarketGroups_hasTypes, 
            True AS _from0
        FROM EveProfiteerDbEntities.InvMarketGroups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.InvMarketGroups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InvMarketGroups
        [EveProfiteerDbModel.InvMarketGroup](T1.InvMarketGroup_MarketGroupId, T1.InvMarketGroup_ParentGroupId, T1.InvMarketGroup_MarketGroupName, T1.InvMarketGroup_Description, T1.InvMarketGroup_IconId, T1.InvMarketGroup_HasTypes)
    FROM (
        SELECT 
            T.marketGroupID AS InvMarketGroup_MarketGroupId, 
            T.parentGroupID AS InvMarketGroup_ParentGroupId, 
            T.marketGroupName AS InvMarketGroup_MarketGroupName, 
            T.description AS InvMarketGroup_Description, 
            T.iconID AS InvMarketGroup_IconId, 
            T.hasTypes AS InvMarketGroup_HasTypes, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.invMarketGroups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.mapRegions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing mapRegions
        [EveProfiteerDbModel.Store.mapRegions](T1.mapRegions_regionID, T1.mapRegions_regionName, T1.mapRegions_x, T1.mapRegions_y, T1.mapRegions_z, T1.mapRegions_xMin, T1.mapRegions_xMax, T1.mapRegions_yMin, T1.mapRegions_yMax, T1.mapRegions_zMin, T1.mapRegions_zMax, T1.mapRegions_factionID, T1.mapRegions_radius)
    FROM (
        SELECT 
            T.RegionId AS mapRegions_regionID, 
            T.RegionName AS mapRegions_regionName, 
            T.X AS mapRegions_x, 
            T.Y AS mapRegions_y, 
            T.Z AS mapRegions_z, 
            T.XMin AS mapRegions_xMin, 
            T.XMax AS mapRegions_xMax, 
            T.YMin AS mapRegions_yMin, 
            T.YMax AS mapRegions_yMax, 
            T.ZMin AS mapRegions_zMin, 
            T.ZMax AS mapRegions_zMax, 
            T.FactionId AS mapRegions_factionID, 
            T.Radius AS mapRegions_radius, 
            True AS _from0
        FROM EveProfiteerDbEntities.MapRegions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.MapRegions.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MapRegions
        [EveProfiteerDbModel.MapRegion](T1.MapRegion_RegionId, T1.MapRegion_RegionName, T1.MapRegion_X, T1.MapRegion_Y, T1.MapRegion_Z, T1.MapRegion_XMin, T1.MapRegion_XMax, T1.MapRegion_YMin, T1.MapRegion_YMax, T1.MapRegion_ZMin, T1.MapRegion_ZMax, T1.MapRegion_FactionId, T1.MapRegion_Radius)
    FROM (
        SELECT 
            T.regionID AS MapRegion_RegionId, 
            T.regionName AS MapRegion_RegionName, 
            T.x AS MapRegion_X, 
            T.y AS MapRegion_Y, 
            T.z AS MapRegion_Z, 
            T.xMin AS MapRegion_XMin, 
            T.xMax AS MapRegion_XMax, 
            T.yMin AS MapRegion_YMin, 
            T.yMax AS MapRegion_YMax, 
            T.zMin AS MapRegion_ZMin, 
            T.zMax AS MapRegion_ZMax, 
            T.factionID AS MapRegion_FactionId, 
            T.radius AS MapRegion_Radius, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.mapRegions AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.invGroups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing invGroups
        [EveProfiteerDbModel.Store.invGroups](T1.invGroups_groupID, T1.invGroups_categoryID, T1.invGroups_groupName, T1.invGroups_description, T1.invGroups_iconID, T1.invGroups_useBasePrice, T1.invGroups_allowManufacture, T1.invGroups_allowRecycler, T1.invGroups_anchored, T1.invGroups_anchorable, T1.invGroups_fittableNonSingleton, T1.invGroups_published)
    FROM (
        SELECT 
            T.GroupId AS invGroups_groupID, 
            T.CategoryId AS invGroups_categoryID, 
            T.GroupName AS invGroups_groupName, 
            T.Description AS invGroups_description, 
            T.IconId AS invGroups_iconID, 
            T.UseBasePrice AS invGroups_useBasePrice, 
            T.AllowManufacture AS invGroups_allowManufacture, 
            T.AllowRecycler AS invGroups_allowRecycler, 
            T.Anchored AS invGroups_anchored, 
            T.Anchorable AS invGroups_anchorable, 
            T.FittableNonSingleton AS invGroups_fittableNonSingleton, 
            T.Published AS invGroups_published, 
            True AS _from0
        FROM EveProfiteerDbEntities.InvGroups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.InvGroups.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InvGroups
        [EveProfiteerDbModel.InvGroup](T1.InvGroup_GroupId, T1.InvGroup_CategoryId, T1.InvGroup_GroupName, T1.InvGroup_Description, T1.InvGroup_IconId, T1.InvGroup_UseBasePrice, T1.InvGroup_AllowManufacture, T1.InvGroup_AllowRecycler, T1.InvGroup_Anchored, T1.InvGroup_Anchorable, T1.InvGroup_FittableNonSingleton, T1.InvGroup_Published)
    FROM (
        SELECT 
            T.groupID AS InvGroup_GroupId, 
            T.categoryID AS InvGroup_CategoryId, 
            T.groupName AS InvGroup_GroupName, 
            T.description AS InvGroup_Description, 
            T.iconID AS InvGroup_IconId, 
            T.useBasePrice AS InvGroup_UseBasePrice, 
            T.allowManufacture AS InvGroup_AllowManufacture, 
            T.allowRecycler AS InvGroup_AllowRecycler, 
            T.anchored AS InvGroup_Anchored, 
            T.anchorable AS InvGroup_Anchorable, 
            T.fittableNonSingleton AS InvGroup_FittableNonSingleton, 
            T.published AS InvGroup_Published, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.invGroups AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.invTypeMaterials.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing invTypeMaterials
        [EveProfiteerDbModel.Store.invTypeMaterials](T1.invTypeMaterials_typeID, T1.invTypeMaterials_materialTypeID, T1.invTypeMaterials_quantity)
    FROM (
        SELECT 
            T.TypeId AS invTypeMaterials_typeID, 
            T.MaterialTypeId AS invTypeMaterials_materialTypeID, 
            T.Quantity AS invTypeMaterials_quantity, 
            True AS _from0
        FROM EveProfiteerDbEntities.InvTypeMaterials AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.InvTypeMaterials.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing InvTypeMaterials
        [EveProfiteerDbModel.InvTypeMaterials](T1.InvTypeMaterials_TypeId, T1.InvTypeMaterials_MaterialTypeId, T1.InvTypeMaterials_Quantity)
    FROM (
        SELECT 
            T.typeID AS InvTypeMaterials_TypeId, 
            T.materialTypeID AS InvTypeMaterials_MaterialTypeId, 
            T.quantity AS InvTypeMaterials_Quantity, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.invTypeMaterials AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.RefTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RefTypes
        [EveProfiteerDbModel.Store.RefTypes](T1.RefTypes_Id, T1.RefTypes_Name)
    FROM (
        SELECT 
            T.Id AS RefTypes_Id, 
            T.Name AS RefTypes_Name, 
            True AS _from0
        FROM EveProfiteerDbEntities.RefTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.RefTypes.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing RefTypes
        [EveProfiteerDbModel.RefType](T1.RefType_Id, T1.RefType_Name)
    FROM (
        SELECT 
            T.Id AS RefType_Id, 
            T.Name AS RefType_Name, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.RefTypes AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbModelStoreContainer.MarketOrders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MarketOrders
        [EveProfiteerDbModel.Store.MarketOrders](T1.MarketOrders_Id, T1.MarketOrders_OrderId, T1.MarketOrders_CharacterId, T1.MarketOrders_StationId, T1.MarketOrders_VolumeEntered, T1.MarketOrders_VolumeRemaining, T1.MarketOrders_MinVolume, T1.MarketOrders_OrderState, T1.MarketOrders_TypeId, T1.MarketOrders_Range, T1.MarketOrders_AccountKey, T1.MarketOrders_Duration, T1.MarketOrders_Escrow, T1.MarketOrders_Price, T1.MarketOrders_Bid, T1.MarketOrders_Issued)
    FROM (
        SELECT 
            T.Id AS MarketOrders_Id, 
            T.OrderId AS MarketOrders_OrderId, 
            T.ApiKeyEntityId AS MarketOrders_CharacterId, 
            T.StationId AS MarketOrders_StationId, 
            T.VolumeEntered AS MarketOrders_VolumeEntered, 
            T.VolumeRemaining AS MarketOrders_VolumeRemaining, 
            T.MinVolume AS MarketOrders_MinVolume, 
            CAST(T.OrderState AS [Edm.Int32]) AS MarketOrders_OrderState, 
            T.TypeId AS MarketOrders_TypeId, 
            T.Range AS MarketOrders_Range, 
            T.AccountKey AS MarketOrders_AccountKey, 
            T.Duration AS MarketOrders_Duration, 
            T.Escrow AS MarketOrders_Escrow, 
            T.Price AS MarketOrders_Price, 
            T.Bid AS MarketOrders_Bid, 
            T.Issued AS MarketOrders_Issued, 
            True AS _from0
        FROM EveProfiteerDbEntities.MarketOrders AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for EveProfiteerDbEntities.MarketOrders.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MarketOrders
        [EveProfiteerDbModel.MarketOrder](T1.MarketOrder_Id, T1.MarketOrder_OrderId, T1.MarketOrder_ApiKeyEntityId, T1.MarketOrder_StationId, T1.MarketOrder_VolumeEntered, T1.MarketOrder_VolumeRemaining, T1.MarketOrder_MinVolume, T1.MarketOrder_OrderState, T1.MarketOrder_TypeId, T1.MarketOrder_Range, T1.MarketOrder_AccountKey, T1.MarketOrder_Duration, T1.MarketOrder_Escrow, T1.MarketOrder_Price, T1.MarketOrder_Bid, T1.MarketOrder_Issued)
    FROM (
        SELECT 
            T.Id AS MarketOrder_Id, 
            T.OrderId AS MarketOrder_OrderId, 
            T.CharacterId AS MarketOrder_ApiKeyEntityId, 
            T.StationId AS MarketOrder_StationId, 
            T.VolumeEntered AS MarketOrder_VolumeEntered, 
            T.VolumeRemaining AS MarketOrder_VolumeRemaining, 
            T.MinVolume AS MarketOrder_MinVolume, 
            CAST(T.OrderState AS [EveProfiteerDbModel.OrderState]) AS MarketOrder_OrderState, 
            T.TypeId AS MarketOrder_TypeId, 
            T.Range AS MarketOrder_Range, 
            T.AccountKey AS MarketOrder_AccountKey, 
            T.Duration AS MarketOrder_Duration, 
            T.Escrow AS MarketOrder_Escrow, 
            T.Price AS MarketOrder_Price, 
            T.Bid AS MarketOrder_Bid, 
            T.Issued AS MarketOrder_Issued, 
            True AS _from0
        FROM EveProfiteerDbModelStoreContainer.MarketOrders AS T
    ) AS T1");
        }
    }
}
